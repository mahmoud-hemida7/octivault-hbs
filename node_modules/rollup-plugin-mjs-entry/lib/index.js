'use strict';

function _unsupportedIterableToArray(o, minLen) {
  if (!o) return;
  if (typeof o === "string") return _arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor) n = o.constructor.name;
  if (n === "Map" || n === "Set") return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
}

function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length) len = arr.length;

  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];

  return arr2;
}

function _createForOfIteratorHelper(o, allowArrayLike) {
  var it;

  if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) {
    if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
      if (it) o = it;
      var i = 0;

      var F = function () {};

      return {
        s: F,
        n: function () {
          if (i >= o.length) return {
            done: true
          };
          return {
            done: false,
            value: o[i++]
          };
        },
        e: function (e) {
          throw e;
        },
        f: F
      };
    }

    throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }

  var normalCompletion = true,
      didErr = false,
      err;
  return {
    s: function () {
      it = o[Symbol.iterator]();
    },
    n: function () {
      var step = it.next();
      normalCompletion = step.done;
      return step;
    },
    e: function (e) {
      didErr = true;
      err = e;
    },
    f: function () {
      try {
        if (!normalCompletion && it.return != null) it.return();
      } finally {
        if (didErr) throw err;
      }
    }
  };
}

var banner = '// Generated by rollup-plugin-mjs-entry\n\n';
function mjsEntry() {
  var pluginOptions = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  return {
    name: 'rollup-plugin-mjs-entry',
    generateBundle: function generateBundle(options, bundle) {
      var exports = options.exports,
          format = options.format;
      if (format !== 'cjs') return;

      for (var _i = 0, _Object$keys = Object.keys(bundle); _i < _Object$keys.length; _i++) {
        var fileName = _Object$keys[_i];
        var chunk = bundle[fileName];
        if (chunk.type !== 'chunk' || !chunk.isEntry) continue;
        var source = banner + "import cjs from './".concat(fileName, "';\n\n");
        var includeDefault = pluginOptions.includeDefault;

        var _iterator = _createForOfIteratorHelper(chunk.exports),
            _step;

        try {
          for (_iterator.s(); !(_step = _iterator.n()).done;) {
            var name = _step.value;

            if (name === 'default') {
              if (exports === 'named' || chunk.exports.length > 1) {
                source += 'export default cjs["default"];\n';
                includeDefault = false;
              } else {
                includeDefault = true;
              }
            } else {
              source += "export const ".concat(name, " = cjs.").concat(name, ";\n");
            }
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }

        if (includeDefault) {
          source += 'export default cjs;\n';
        }

        this.emitFile({
          type: 'asset',
          fileName: fileName.replace(/\.js$/, '') + '.mjs',
          source: source
        });
      }
    }
  };
}

module.exports = mjsEntry;
